#version 400

layout(location = 0) in vec3 vertex_position;
layout(location = 1) in vec3 vertex_normal;
layout(location = 2) in vec2 texture_coord;
layout(location = 3) in ivec4 bone_id;
layout(location = 4) in vec4 bone_weights;


out vec3 LightIntensity;
out vec2 texture_coordinates;

uniform mat4 view;
uniform mat4 proj;
uniform mat4 model;

uniform mat4 bone_matrices[100];




vec4 LightPosition = vec4 (5.0, 5.0, 5.0, 1.0); // Light position in world coords.


vec3 Kd = vec3 (1.0, 1.0, 1.0); // diffuse surface reflectance
vec3 Ld = vec3 (1.0, 1.0, 1.0); // Light source intensity

vec3 Ka = vec3(0.75, 0.75, 0.75);
vec3 La = vec3(0.75, 0.75, 0.75);




void main(){



  mat4 ModelViewMatrix = view * model;
  mat3 NormalMatrix =  mat3(ModelViewMatrix);
  // Convert normal and position to e coords
  // Normal in view space
  vec3 tnorm = normalize( NormalMatrix * vertex_normal);
  // Position in view space
  vec4 eyeCoords = ModelViewMatrix * vec4(vertex_position,1.0);
  //normalised vector towards the light source
 vec3 s = normalize(vec3(LightPosition - eyeCoords));
  
  // The diffuse shading equation, dot product gives us the cosine of angle between the vectors
  vec3 Id = Ld * Kd * max( dot( s, tnorm ), 0.0 );
  vec3 Ia = La * Ka;

  LightIntensity = Ia + Id;

  mat4 bone_trans = bone_matrices[bone_id[0]] * bone_weights[0];
  bone_trans += bone_matrices[bone_id[1]] * bone_weights[1];
  bone_trans += bone_matrices[bone_id[2]] * bone_weights[2];
  bone_trans += bone_matrices[bone_id[3]] * bone_weights[3];



  
  // Convert position to clip coordinates and pass along
  gl_Position = proj * view * model * bone_trans * vec4(vertex_position, 1.0);

  texture_coordinates = texture_coord;
}


  